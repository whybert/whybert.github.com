<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Whybert Blog</title>
        <description>Whybert Blog - Huaiyuan Wang</description>
        <link>http://www.whybert.com</link>
        <link>http://www.whybert.com</link>
        <lastBuildDate>2014-04-27T17:45:21+08:00</lastBuildDate>
        <pubDate>2014-04-27T17:45:21+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>操作系统的几种多任务机制</title>
                <description>&lt;p&gt;不知道该写个什么标题了，其实只是想分析一下几个名词：多道程序(Multiprogramming)、分时系统(Time-Sharing System)、协作式(Cooperative)、抢占式(Preemptive)。这几个名词我在不同的书上看见过，发现很多书解释的不清楚，让人觉得很抽象，下面说下我的理解。&lt;/p&gt;

&lt;p&gt;首先，说说“多道程序”和“分时系统”。我下面说的“多道程序”、“分时系统”都是指的狭义的概念，对应计算机发展早期的系统，如多道程序批处理系统、兼容分时系统(CTSS)。&lt;/p&gt;

&lt;p&gt;从设计目的上来说，多道程序用于提高CPU利用率，分时用于减少响应时间。从操作系统任务调度的机制上来讲，多道程序是利用了运行中的任务进行IO等操作而使CPU空闲时的间隙运行下一个任务，达到提高CPU利用率的效果，对任务的调度是在CPU空闲时进行的；分时系统是将不同任务轮换执行，每个任务执行一个较短的时间，好像不同的任务在同时执行，减少了交互任务的响应时间，对任务的调度是由定时器每隔固定时间产生中断时进行的，系统会剥夺正在执行的任务的CPU使用权。&lt;/p&gt;

&lt;p&gt;然后，再说下“协作式”和“抢占式”。&lt;/p&gt;

&lt;p&gt;Windows3.1是一个典型的协作式多任务系统，当程序调用Yield、GetMessage、PeekMessage这几个系统调用时，系统可以进行调度其他程序运行，但是，如果一个运行中的程序一直占着CPU不放，系统也没办法。协作式多任务系统的缺点是显而易见的，因为一旦某个程序出现死循环或者死锁，系统就会死机。&lt;/p&gt;

&lt;p&gt;UNIX、Linux、Windows95及之后的windows系统等都采用的是抢占式多任务系统，操作系统可以强制剥夺CPU资源分配给它认为的更需要CPU资源的进程。抢占式多任务系统剥夺CPU资源的行为与上面说的分时系统有些相似，我的理解是分时系统强调分时，而抢占式多任务系统更注重任务的优先级和系统的最优性，每个任务获得的执行时间并非平均。这里插一句，在《程序员的自我修养:链接装载与库》一书1.4.1节中，用windows3.1发生死循环会死机作为分时系统的例子有些不太恰当，因为这事不是分时系统的错，是协作式多任务系统的问题，而且windows3.1按我的理解不属于狭义的分时系统。&lt;/p&gt;

&lt;p&gt;抢占式虽然好，但是带来了数据一致性的问题。以unix为例，程序运行在用户态或核心态，既要防止不同进程之间的数据修改对一致性的破坏，又要防止内核本身产生数据不一致问题。而协作式多任务下调度时机明确，更容易解决数据一致性的问题，所以协作式也不是没有优点。协程就是这样的思想，通过yield方式转移控制权，就好比实现一个协作式多任务子系统，相比于多线程的解决方案，没有了线程安全的问题。&lt;/p&gt;</description>
                <link>http://www.whybert.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2014/04/27/</link>
                <guid>http://www.whybert.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2014/04/</guid>
                <pubDate>2014-04-27T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>读《c专家编程》总结</title>
                <description>&lt;p&gt;去年年底读的，时间有点久了，读的时候的很多体会也忘了，单对我感兴趣的内容做个简单总结。正好最近看到知乎上程序员约架的事，我只能说，我C语言很渣，写错什么莫怪。。&lt;/p&gt;

&lt;h4 id=&quot;1c&quot;&gt;1、C的历史：&lt;/h4&gt;

&lt;p&gt;C语言的产生是源于Multics工程。Multics失败了，之后Ken Thompson和Dennis Ritchie总结教训用汇编编写了UNIX，因为用汇编写UNIX太笨拙，所以Thompson创建了B语言，并尝试用B语言进行UNIX系统编程，但是B语言存在数据类型和效率等方面的问题，导致Thompson没能用B语言实现UNIX。之后Dennis Ritchie解决了B语言的一些问题，创立了New B语言，不久后这种语言被称为了C语言，UNIX也开始用C实现了。这时（1972年）的C还是早期的C,1978年出版了TCPL，由这个书定义的C称作K&amp;amp;R C，1989年ANSI C标准最终形成（C89）。之后又有了C99和C11，这都在《C专家编程》出版之后了。&lt;/p&gt;

&lt;h4 id=&quot;2ansi_c&quot;&gt;2、ANSI C的一些特点：&lt;/h4&gt;

&lt;p&gt;ANSI C的几个术语:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unportable code: implementation-defined, unspecified

bad code: undefined, constraint

portable code: strictly-comforming&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了保证代码的可移植，只能使用已确定的特性、不突破编译限制、不产生依赖由编译器定义的或未确定的或未定义的特性的输出。&lt;/p&gt;

&lt;h4 id=&quot;3c&quot;&gt;3、C的一些槽点：&lt;/h4&gt;

&lt;p&gt;一个符号具有多种含义：* &amp;amp; void static () 等&lt;/p&gt;

&lt;p&gt;复杂的语法声明：左右法则、typedef&lt;/p&gt;

&lt;p&gt;不合理的优先级顺序：先乘除后加减，其他一律加括号&lt;/p&gt;

&lt;p&gt;类型转换规则：unsigned与signed比较时signed转换为unsigned等&lt;/p&gt;

&lt;p&gt;其他的一些细节，如switch默认fall through等&lt;/p&gt;

&lt;h4 id=&quot;4&quot;&gt;4、数组和指针：&lt;/h4&gt;

&lt;p&gt;数组不是指针，在某些情况下数组可以“看作”是指针。数组直接访问数据，指针间接访问数据，即用指针时CPU要多一次访问内存的操作。&lt;/p&gt;

&lt;p&gt;在编译时编译器要根据上下文判断一个符号指的是符号的地址（左值）还是符号的值（右值），而表达式内的数组名可“看作”指针，其地址在编译时可知，即不需要解引用，此时若把数组“等同”于指针，则会多一次解引用操作。所以除作为函数参数等情况外定义与声明应当匹配。&lt;/p&gt;

&lt;p&gt;对数组取地址实际上会得到一个指向数组的指针。多维数组在由编译器改写为行参时，数组的数组会被改写为数组的指针，而不是指针的指针。&lt;/p&gt;

&lt;h4 id=&quot;5&quot;&gt;5、运行时数据结构：&lt;/h4&gt;

&lt;p&gt;a.out：魔数、BSS、数据段、文本段等等。&lt;/p&gt;

&lt;p&gt;运行时数据结构：堆栈、活动记录、数据、堆等。&lt;/p&gt;

&lt;p&gt;setjmp, longjmp: setjmp(jmp_buf j);longjmp(jmp_buf j, int i);&lt;/p&gt;

&lt;h4 id=&quot;6&quot;&gt;6、总结：&lt;/h4&gt;

&lt;p&gt;其实作者在书里讲了很多故事，比单纯的技术部分要有趣的多，技术部分的举例很多也很经典。这本书能作为C语言的经典进阶书之一，我觉得一是技术讲的精炼透彻，二就是作者高超的吐槽和情景分析技巧能引发读者对语言更深层的兴趣。书里还讲了链接装载、内存等内容，这方面的书我推荐看《程序员的自我修养》,等过几天再对该书做一个总结。&lt;/p&gt;</description>
                <link>http://www.whybert.com/%E8%AF%AD%E8%A8%80/2014/03/30/c</link>
                <guid>http://www.whybert.com/%E8%AF%AD%E8%A8%80/2014/03/30/c</guid>
                <pubDate>2014-03-30T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
